"""
@BY: Reem Alghamdi
@DATE: 01-09-2020
"""


def pattern_count(text, pattern):
    count = 0
    for index in range(len(text) - len(pattern) + 1):
        kmer = text[index: index + len(pattern)]
        if kmer == pattern:
            count = count + 1
    print("{} is the number of times {} showed in {}".format(count, pattern, text))
    return count


def frequency_table(text, k):
    # take text and a length, find all k-mer and their frequencies
    """
    first, loop throgh text like pattern count, add pattern + count to table and return
    """
    table = {}
    for index in range(len(text) - k + 1):
        kmer = text[index: index + k]
        if table.get(kmer):
            table[kmer] = table[kmer] + 1
        else:
            table[kmer] = 1
    return table


def max_map(dictionary):
    # take dictionary, return key-value pair of highest value
    dictionary = sorted(dictionary.items(), key=lambda x: x[1], reverse=True)
    if len(dictionary) > 0:
        key, value = dictionary[0]
        return value
    else:
        return None


def better_frequent_words(text, k):
    frequent_pattern = []
    freq_map = frequency_table(text, k)
    max = max_map(freq_map)
    for pattern, freq in freq_map.items():
        if freq == max:
            frequent_pattern.append(pattern)
            print(pattern, end=' ')
    return frequent_pattern


if __name__ == "__main__":
    pattern_count("TTATGTGCTACGTGTGCTATGTGCTATGTGCTAGGCCCGGCTGTGCTACATGTGCTATGTGCTATTTTAGAGTGTGCTAATGTGCTACTGTGCTACCGTGTGCTACTGTGCTATGTGCTAACGACAGTGTGCTAATGATGTGCTATGTGCTATTTCCAGTGTGCTAGTGTGCTACGTCTGTGCTATGTGCTATGTGCTATGTGCTATGTCGTGTGCTATGTGCTAATGTGCTACGCTAGGTTGTGCTAGTCTGTGCTAAGTCTTTGTGCTACGTAGATGTGCTACTGAACCGTATGTGCTACTGTGCTACGTATGTGCTAAGCGTGTGCTACATGTGCTAATGTGCTATGTGCTAGTCGTTGTGCTATTCTGTGCTATGTGCTATGTGCTAGTGTGCTAGTGTGCTATGTGCTACTTGTGCTATTGTGCTAGGGTTTGTGCTAATTGTCGATGTGCTAGTGTGCTAATGTGCTAATGTGCTATGTGCTATGTGCTACTGTGCTAATGTGCTATGTGGCAATTGTGCTATGTGCTAGCATGTGCTATCGAGCTCATGTGCTAACCGGATTGTGCTATGTGCTAATATGTGCTAAGATGCTGTGCTATGTGTGCTATGTGCTAGCCAGGGGTGTGCTATTGTGCTAGTGATCTGCTGTCATGTGCTAGGTTGTGCTACGATGTGCTAAACTCGTGTGCTAACTTGTGCTATTGTGCTATGTGCTACGTGTGCTAGATGTGCTAAAGCAAGTGTGCTATGTGCTATTGTGCTATTTCTGCCGTGTGCTATGCTGCATGTGCTATGTGCTAATGTGCTACAGTGTGCTATTGTGCTAGTGTGCTATGTGCTATGTGCTATGTGCTAAATGTGCTATGTGCTAGAATGTGCTATGTGCTATGTGCTAAACACCTGTGCTATGTGCTATTGTGCTAAATCTAGCCTGTGCTATTATTATGTGCTAACTGTGCTAAGGTGG", "TGTGCTATG")
    better_frequent_words("ACGAGGAGAAAAAAGCCCTCACAAGTAAACGAGGAGAATATGTTTAACCTGACCTTTCTGACCTTTTATGTTTAACCTGACCTTTCTGACCTTTCTGACCTTTACAAGTAATATGTTTAACACAAGTAAACGAGGAGAAAAAAGCCCTCCTGACCTTTAAAAGCCCTCTATGTTTAACAAAAGCCCTCTATGTTTAACAAAAGCCCTCTATGTTTAACTATGTTTAACACAAGTAAAAAAGCCCTCACAAGTAACTGACCTTTCTGACCTTTTATGTTTAACACAAGTAAAAAAGCCCTCACGAGGAGAACTGACCTTTACGAGGAGAACTGACCTTTACGAGGAGAATATGTTTAACAAAAGCCCTCCTGACCTTTACAAGTAAACGAGGAGAAAAAAGCCCTCAAAAGCCCTCACGAGGAGAAACGAGGAGAAACGAGGAGAAACAAGTAAACGAGGAGAAAAAAGCCCTCTATGTTTAACCTGACCTTTACGAGGAGAACTGACCTTTTATGTTTAACTATGTTTAACCTGACCTTTCTGACCTTTCTGACCTTTAAAAGCCCTCACGAGGAGAAAAAAGCCCTCCTGACCTTTACAAGTAACTGACCTTTCTGACCTTTACGAGGAGAACTGACCTTTACGAGGAGAAACAAGTAAACAAGTAATATGTTTAACAAAAGCCCTCCTGACCTTTCTGACCTTTACAAGTAAACAAGTAACTGACCTTTTATGTTTAACTATGTTTAACACGAGGAGAAAAAAGCCCTCAAAAGCCCTCCTGACCTTTACAAGTAACTGACCTTTACAAGTAACTGACCTTTTATGTTTAACCTGACCTTTACGAGGAGAACTGACCTTTCTGACCTTTCTGACCTTTACAAGTAAACGAGGAGAA", 12)