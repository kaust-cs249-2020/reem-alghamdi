"""
@BY: Reem Alghamdi
@DATE: 13-11-2020
"""
import operator

from ch3.code.ch3_14 import maximal_non_branching_paths
from ch9.code.ch9_15 import modified_suffix_tree_construction


def depth_first(trie, text, b, pos, count, visited, string, paths):
    if b not in visited:
        visited.append(b)
        if b in trie.edges:  # not leaf node
            string += text[pos:pos + count]
            for n, p, c in trie.edges[b]:
                depth_first(trie, text, n, p, c, visited, string, paths)
        else:
            paths.append(string)
        visited.remove(b)
        string = ""
    return sorted(paths, key=len, reverse=True)


def longest_repeat_problem(text):
    text += "$"
    trie = modified_suffix_tree_construction(text)
    return depth_first(trie, text, trie.root, 0, 0, [], "", [])[0]


if __name__ == "__main__":
    print(longest_repeat_problem("ATATCGTTTTATCGTT"))
    print(longest_repeat_problem("ABABABA"))
    print(longest_repeat_problem("ATCGATCGA"))
    # print(longest_repeat_problem("AATTTCCGACTTGCATGACGAGTCAGCGTTCCATCTGATCGAGTCTCCGAAGAACAAATACCCCTACTCAGTTGTGAGCCCCTTTACCGTGAGGACAGGGTCCTTGATGTCGTCTCCTAATTTGCGTTGCGGCTCAACATGTTGTACATAGTGGGGCCAGCCCCAGGGATTTTGTAATTTCTACACTCCATATACGGGACAAGGGTGAGCATTTCCGGGCTTGGATAGGGGCTGCAAGAAAATATCTGGACGTAAGAACTTAATGCCATTCCTACATCCTCGATACCTCGTCTGTCAGAGCAATGAGCTGGTTAGAGGACAGTATTGGTCGGTCATCCTCAGATTGGGGACACATCCGTCTCTATGTGCGTTCCGTTGCCTTGTGCTGACCTTGTCGAACGTACCCCATCTTCGAGCCGCACGCTCGACCAGCTAGGTCCCAGCAGTGGCCTGATAGAAAAATTACCTACGGGCCTCCCAATCGTCCTCCCAGGGTGTCGAACTCTCAAAATTCCCGCATGGTCGTGCTTCCGTACGAATTATGCAAACTCCAGAACCCGGATCTATTCCACGCTCAACGAGTCCTTCACGCTTGGTAGAATTTCATGCTCGTCTTTTGTATCCGTGTAAGTAGGAGGCCGCTGTACGGGTATCCCAGCCTTCGCGCTCTGCTGCAGGGACGTTAACACTCCGAACTTTCCATATACGGGACAAGGGTGAGCATTTCCGGGCTTGGATAGGGGCTGCAAGAAAATATCTGGACGTAAGAAGCTCTGAGGGATCCTCACGGAGTTAGATTTATTTTCCATATACGGGACAAGGGTGAGCATTTCCGGGCTTGGATAGGGGCTGCAAGAAAATATCTGGACGTAAGAAGAGTGATGTTTGGAATGCCAACTTCCATGCACGCCAATTGAGCAATCAGGAGAATCGAGTGCTGTTGACCTAGACCTTGTCAGAAGTATGAATTAACCGCGCGTGTAGGTTTGTCGCTCGACCTGCAAGGGTGCACAATCTGGACTGTCGTCGGCGAACGCTTTCATACGCCTACAAACCGCGTTGCTGGTCGAATCGATCTCACCACCGGCCTTGCAGGATTCTAATTATTCTCTCTCGGTGAGACTGCCGGCGGTCCATGGGTCTGTGTTTCGCTTCAAGCAGTGATATACTGGCGTTTTGTGACACATGGCCACGCACGCCTCTCGTTACTCCCAAT"))
    print(longest_repeat_problem("ATGACATACATGATGCTATTGGTGGCTTAACCTTGCGGTCCTACCCACCCGAAACAAGGTATAGGCAGAACGGGTTTTATTCCGAACATGTATATGCCCCCTTGCCTATAATATTATGGAACGCCTCGGTAAGGCCCGTCAGGGGAAAGGAGTATGCATGCTGCTATATGCCGTAAGGTTCGCCTCTTATGAACTACTAATCGACACCCGTTTCGAGTTACTTGGGTGCCGCGCATGCGCAAATGTGCAGTCCGTACAGATGATTGGACTACAAGGGCCGGTTGAACAGACCGGACAGGACTTTGCTGCATCGGCAGCGGCCGACCTAGTACTGATAAATTGAAGTTTTAAATGAGGGAGCAAGATTGGTGGCTTAACCTTGCGGTCCTACCCACCCGAAACAAGGTATAGGCAGAACGGGTTTTATTCCGAACATGTATATGCCCCCTTGGCTGTTGGTGGCTTAACCTTGCGGTCCTACCCACCCGAAACAAGGTATAGGCAGAACGGGTTTTATTCCGAACATGTATATGCCCCCTTGGTTAAAGGGCTAGGGGGTGCCGATATCAGGTGGCCCATCGCCGCAATTCCTACCTGACGGTCGAAAGGGTCGAGGAAGGTGCCGAACAGGAATTTGCCTGCTGTAGCAGTGCAGGCGTATGAAAAACGATTTTTTAACGGGAGGGCCTCCCAACTGAATGAACTAATGATTTTCATGCGTGAAGAAAGCGTTAGGGAATGGAATTTTTGGGGAGAGTTCTTTACGGATCTGCGATCCAATTTGGGGTTATCACTAATACCTTTAAACCGATCAGTGCTATTCCCCATTATTGCCCCGTGCGGACTATATAGTAGCCCCGTCGATCGGCTGGCACGCGTGTTAGGGGTCGAGCTGGCCTTCTGTTCCCCGGGCTGACCGCGTGTTTGCGTAGCTGAAGGTCGACTTTTGCGACGCACTCGCGTAAGCCTGATTAAACACTTATTCAGGTCACTGCCATTCTGGAGGGACAACCGCTGTCGGTTCGCGGTTATCCATTGATGGCATAAACCATCCTCCACTTAGCTCAACACTAGGTACCGGGCTGGCAGCAGGCAGCAAGACCCAGTATTTTCGCGCCCTTTTTGGGATTATACGTACCGGATGGACGCGTACCATGGCCCGGATGCCGTAGTACCATTAGTGATCTTACGCTCTTTTGAAGCCGCGAATGATTACGGAAGAAGGTATATGGAGCCGGACGTTCGGCCTTTGCGTGAA"))