"""
@BY: Reem Alghamdi
@DATE: 25-09-2020
"""
from ch4.code.ch4_11 import linear_spectrum


def linear_score(peptide, spectrum, amino_list=None):
    """
    given a peptide and a spectrum,
    return the count of the number of matches between linear spectrum of peptide and spectrum
    """
    s = spectrum.copy()
    count = 0
    for x in linear_spectrum(peptide, amino_list=amino_list):
        if x in s:
            count += 1
            s.remove(x)
    return count


def trim(leaderboard, spectrum, n, amino_list=None):
    """
    :param leaderboard: list of peptides
    :param spectrum: the spectrum wanted
    :param n: the array length (ties included)
    :return: collection of the top N highest-scoring linear peptides in Leaderboard (including ties) with respect to Spectrum.
    """
    peptides = {}
    for peptide in leaderboard:
        peptides[peptide] = linear_score(peptide, spectrum, amino_list=amino_list)
    peptides_list = sorted(peptides.items(), key=lambda item: item[1], reverse=True)
    cut = [t[0] for i, t in enumerate(peptides_list) if i < n]
    for t in peptides_list[n:]:
        if t[1] == peptides[cut[-1]]:
            cut.append(t[0])
    return cut


if __name__ == "__main__":
    # sp = "0 57 57 57 71 87 97 99 99 101 103 103 113 113 113 113 114 114 115 128 128 128 128 128 128 128 137 147 147 156 156 156 156 163 163 163 170 171 185 186 186 186 186 194 198 199 212 216 218 224 225 227 228 241 242 243 243 248 250 251 256 260 269 275 281 284 284 284 285 287 289 291 298 299 299 299 299 311 312 314 314 319 326 333 338 340 346 349 351 355 356 356 356 365 365 380 381 384 388 388 402 411 412 412 412 412 413 419 429 431 432 434 437 439 442 446 450 451 452 454 455 461 461 466 468 469 469 482 484 487 493 493 494 497 501 508 509 510 526 532 537 540 544 547 550 555 565 567 568 574 575 576 579 580 582 589 594 595 597 597 598 600 600 608 610 617 618 625 625 636 637 637 652 654 655 663 666 672 675 679 679 679 692 693 694 696 700 703 704 711 712 713 723 728 730 731 736 738 738 745 749 750 753 753 768 780 780 781 788 791 793 797 799 800 800 806 807 807 807 815 822 825 826 831 841 848 849 851 852 858 860 864 866 867 890 894 894 905 906 909 912 912 916 920 924 925 927 935 936 939 943 947 951 954 955 959 962 963 963 963 966 977 978 981 986 992 1004 1007 1019 1022 1022 1030 1037 1040 1040 1042 1048 1049 1055 1068 1076 1079 1079 1081 1087 1087 1092 1105 1105 1106 1110 1113 1118 1118 1119 1126 1129 1133 1135 1144 1147 1149 1150 1155 1163 1168 1179 1190 1193 1193 1196 1204 1205 1205 1207 1207 1209 1211 1218 1226 1232 1234 1236 1241 1246 1250 1250 1276 1276 1281 1282 1291 1292 1293 1303 1304 1306 1307 1312 1317 1321 1321 1324 1324 1335 1337 1349 1354 1361 1363 1368 1373 1378 1395 1397 1397 1404 1404 1404 1406 1407 1413 1416 1418 1432 1432 1434 1435 1444 1449 1452 1452 1468 1489 1491 1491 1500 1501 1501 1503 1506 1510 1517 1520 1524 1531 1531 1535 1560 1560 1560 1563 1569 1572 1580 1581 1581 1588 1592 1595 1602 1602 1605 1615 1616 1619 1629 1638 1648 1657 1657 1659 1662 1663 1673 1682 1687 1694 1700 1705 1705 1715 1716 1716 1719 1723 1733 1743 1751 1758 1766 1767 1772 1778 1785 1785 1785 1787 1788 1790 1815 1818 1819 1829 1830 1836 1847 1856 1868 1871 1879 1880 1886 1886 1887 1891 1901 1906 1913 1913 1929 1932 1934 1935 1937 1941 1943 1943 1944 1981 1984 1993 1999 2004 2004 2014 2014 2015 2034 2038 2041 2047 2050 2057 2062 2065 2069 2071 2076 2081 2092 2098 2099 2107 2117 2118 2127 2128 2142 2160 2166 2168 2170 2175 2179 2185 2197 2197 2204 2220 2226 2227 2231 2233 2236 2239 2244 2248 2255 2273 2280 2288 2293 2298 2298 2313 2323 2324 2325 2331 2337 2346 2354 2360 2361 2361 2367 2383 2394 2395 2395 2403 2411 2416 2426 2427 2430 2436 2453 2474 2484 2486 2487 2508 2510 2511 2517 2523 2523 2523 2530 2531 2531 2531 2539 2541 2547 2558 2587 2599 2609 2614 2618 2636 2636 2638 2639 2644 2645 2659 2660 2673 2678 2679 2686 2694 2702 2717 2727 2735 2737 2742 2744 2759 2765 2773 2774 2781 2792 2795 2799 2807 2822 2830 2834 2845 2845 2855 2864 2868 2872 2887 2896 2898 2898 2921 2923 2935 2959 2973 2978 2983 2985 2992 2992 2992 2997 3011 3016 3020 3024 3024 3026 3073 3084 3086 3091 3095 3106 3111 3120 3120 3123 3139 3139 3148 3163 3183 3183 3185 3210 3210 3220 3223 3233 3234 3236 3267 3276 3284 3286 3291 3297 3332 3336 3338 3338 3348 3357 3369 3390 3399 3431 3435 3444 3447 3451 3453 3466 3470 3472 3485 3504 3524 3534 3550 3572 3573 3579 3585 3600 3617 3641 3649 3652 3671 3678 3686 3720 3720 3728 3728 3765 3777 3799 3799 3823 3833 3835 3864 3884 3912 3927 3936 3938 3955 3963 3963 4011 4040 4051 4066 4083 4110 4139 4149 4179 4196 4238 4252 4295 4296 4365 4394 4399 4424 4512 4527 4580 4640 4683 4796"
    # print(linear_score("ICWTVCKDKSMGGNAGIWLRYYKQRKPYWTFSDKWFQR", [int(x) for x in sp.split()]))

    print(*trim("LAST ALST TLLT TQAS".split(), [int(x) for x in "0 71 87 101 113 158 184 188 259 271 372".split()], 2))

    # sp = "0 71 87 97 97 99 101 101 101 101 101 103 103 113 113 113 113 113 113 113 113 114 114 115 115 128 128 129 129 129 129 129 129 131 131 131 137 137 147 147 156 156 156 163 163 163 186 186 198 200 200 202 202 204 214 214 216 216 216 226 228 230 234 242 242 242 242 242 242 244 245 253 257 257 257 259 260 266 266 268 269 271 276 276 276 276 278 283 284 285 287 293 294 299 301 303 313 317 317 317 327 329 331 343 343 347 354 355 355 356 359 363 363 370 370 371 371 372 379 382 384 388 389 397 397 400 405 407 408 408 413 413 415 415 416 418 418 420 422 428 430 430 432 434 439 444 455 456 458 459 473 476 484 484 485 485 487 499 500 501 506 507 510 510 511 513 515 518 522 526 527 528 529 529 531 533 533 537 540 541 544 544 545 547 558 559 562 568 569 571 572 574 585 586 588 597 598 607 610 612 616 619 620 624 624 625 626 631 636 641 644 646 650 657 657 660 662 663 669 669 670 671 672 674 675 678 681 684 685 689 691 692 696 698 699 700 700 701 711 733 733 735 738 738 739 741 753 771 772 772 773 775 775 775 778 779 782 783 783 786 788 789 794 794 797 798 798 800 801 802 804 805 806 808 810 813 815 828 837 840 846 854 862 864 864 866 869 882 884 885 886 888 889 899 901 902 902 903 904 907 908 911 911 914 914 924 925 926 928 935 935 937 937 941 941 945 952 955 961 961 975 975 977 984 987 988 992 995 999 1002 1013 1015 1016 1017 1017 1017 1022 1025 1032 1032 1038 1039 1039 1040 1044 1051 1055 1058 1058 1059 1062 1065 1066 1070 1070 1072 1074 1084 1088 1097 1099 1100 1101 1103 1104 1105 1106 1118 1118 1121 1130 1133 1135 1142 1150 1151 1153 1153 1154 1154 1156 1165 1171 1172 1186 1187 1194 1196 1198 1200 1201 1201 1202 1207 1212 1213 1214 1215 1216 1217 1217 1218 1218 1219 1231 1233 1234 1234 1236 1248 1255 1259 1264 1267 1272 1279 1281 1285 1298 1300 1301 1309 1311 1315 1315 1315 1316 1318 1319 1319 1321 1325 1330 1331 1334 1335 1338 1341 1343 1344 1346 1347 1348 1352 1363 1363 1372 1379 1395 1396 1398 1402 1410 1414 1414 1422 1422 1428 1429 1429 1430 1431 1432 1433 1434 1435 1435 1438 1447 1448 1450 1452 1460 1461 1471 1472 1472 1476 1476 1478 1481 1494 1499 1509 1515 1517 1521 1525 1532 1534 1535 1535 1535 1543 1546 1548 1551 1557 1557 1561 1561 1561 1562 1566 1566 1573 1577 1581 1585 1585 1589 1603 1605 1606 1608 1609 1609 1612 1618 1628 1634 1635 1636 1638 1647 1663 1664 1664 1664 1672 1672 1674 1674 1677 1680 1682 1686 1690 1694 1699 1702 1708 1713 1715 1716 1718 1718 1722 1723 1724 1740 1741 1743 1748 1749 1756 1763 1777 1777 1778 1781 1785 1792 1801 1803 1803 1805 1810 1811 1811 1815 1819 1819 1822 1823 1827 1830 1837 1837 1842 1844 1849 1850 1853 1869 1872 1876 1878 1878 1879 1887 1905 1906 1906 1912 1916 1916 1916 1924 1925 1929 1934 1936 1939 1940 1940 1940 1948 1948 1950 1965 1972 1979 1979 1991 1993 1996 2000 2000 2005 2007 2007 2009 2017 2019 2019 2026 2031 2034 2035 2039 2042 2053 2053 2058 2061 2064 2076 2079 2079 2087 2087 2094 2096 2097 2103 2113 2118 2120 2120 2123 2125 2132 2132 2135 2135 2136 2138 2140 2147 2150 2167 2171 2171 2192 2193 2200 2200 2200 2205 2209 2216 2216 2219 2224 2226 2226 2232 2233 2233 2233 2235 2237 2250 2252 2262 2266 2266 2268 2276 2284 2287 2296 2300 2303 2313 2318 2334 2334 2334 2336 2336 2337 2339 2347 2349 2355 2355 2356 2363 2363 2365 2366 2379 2380 2389 2397 2397 2413 2413 2416 2418 2434 2435 2437 2446 2447 2449 2449 2452 2466 2468 2468 2473 2476 2490 2492 2493 2494 2494 2494 2502 2510 2511 2519 2526 2533 2536 2542 2547 2549 2550 2553 2560 2578 2579 2579 2586 2597 2605 2605 2615 2620 2622 2623 2624 2624 2625 2627 2631 2632 2634 2648 2650 2650 2650 2651 2655 2689 2691 2706 2710 2711 2715 2733 2733 2733 2735 2738 2742 2742 2744 2747 2751 2753 2756 2761 2763 2768 2771 2779 2802 2807 2813 2820 2824 2825 2828 2836 2836 2836 2843 2846 2862 2862 2866 2871 2873 2876 2876 2881 2882 2900 2903 2907 2924 2933 2933 2937 2938 2944 2944 2949 2953 2957 2965 2972 2975 2975 2975 2987 2995 2999 3004 3018 3034 3034 3037 3037 3038 3039 3058 3062 3066 3066 3070 3073 3078 3078 3082 3088 3101 3104 3112 3119 3130 3135 3138 3149 3151 3152 3163 3163 3171 3172 3179 3190 3191 3193 3195 3217 3217 3220 3229 3238 3241 3241 3243 3244 3248 3250 3251 3276 3286 3291 3292 3300 3308 3318 3320 3321 3330 3335 3342 3351 3351 3354 3354 3357 3358 3358 3372 3387 3405 3407 3420 3422 3429 3431 3433 3433 3434 3439 3448 3455 3471 3483 3485 3486 3486 3488 3510 3514 3521 3533 3534 3534 3535 3546 3551 3552 3568 3585 3596 3599 3599 3600 3611 3611 3614 3615 3622 3634 3635 3647 3649 3664 3664 3681 3682 3696 3697 3708 3713 3727 3728 3728 3728 3735 3748 3750 3751 3771 3777 3797 3809 3812 3827 3828 3837 3841 3841 3842 3851 3857 3864 3864 3868 3868 3884 3898 3913 3940 3940 3942 3943 3955 3965 3969 3970 3970 3977 3981 4013 4014 4027 4027 4044 4053 4054 4056 4057 4083 4096 4098 4099 4110 4126 4140 4140 4140 4145 4155 4158 4167 4171 4184 4209 4211 4212 4223 4253 4255 4259 4268 4272 4284 4296 4296 4299 4303 4313 4352 4368 4373 4374 4397 4397 4397 4400 4409 4409 4416 4428 4465 4469 4487 4501 4510 4510 4526 4529 4538 4560 4566 4572 4584 4630 4639 4639 4639 4643 4651 4673 4673 4681 4685 4752 4752 4752 4768 4782 4786 4786 4802 4829 4853 4867 4881 4881 4883 4915 4915 4942 4968 4968 4982 4994 5028 5044 5069 5069 5071 5095 5097 5157 5157 5170 5184 5198 5210 5258 5270 5299 5311 5313 5371 5373 5412 5426 5474 5486 5527 5575 5587 5642 5688 5743 5844"
    # strings = """GFAQHVMEGIGLDVKFTNIISCFFDHEWSTCHCKHHNSINHTMSMVF LIGDDDEADNCMMMVQSIKWKTLLRYGAFFTFPFYSYAILHVFYVLW KPMWWAFIFGFCDMKNCFDAPFWMHNSVQWEQHYRCNDVKMMSQLCW MAPRDIRMYFDKYHETAALDSQWIIQQIYHLMNVRKLNRTNRFTSVG FEKYHQQQILIDAQRVRLVHTVARAGPGWVQTGGWQQTCPRYKPYAW NVNPCERSSPPNFSWFMSFWADNSDYGDVIFCCPSVLRTMEMQSKKG WDTDTFFQKAMLKKDETADQIFNLRPYSLTCHNENILGNDNQEKQAG TLGSGENDKGHTVGAGHKGHPEREFEAPIERHEHPRVMMTKVGCYWI VCGHHHEQTVIMKAFDAWKVGFLGPIVAWVIFPAVYLWGKSLCPWTN YDSPTTYLSTHCHRLTNRMVHENPVICPPQDFAKYLIQSGWEFPLVA KDPINQTGDTNVRNFNVGCFCGCYFQWERHDGTPMHFWFSQKLSLTW HMKKLFWGIMKHHILFDFVNQPAFTNKAKGPTPHKAEELIRNLGQEK FNDRQRLVCHTNQCCAYKNKVVCSGGGSEISTNAHTYHFLALGHQVG MYYSAWTEPYYPPTLQIWWWYWKYGCTACQTGPHTMVFVQPTCKCVH YYGYRQCSWCQRWTVRRMLCWIDVLHKALHWHVCLLFHQALYGFSHE WASIGAIMRSAKDMYESLEFHKTHCTYFVYMVCKEARPGWTFFIEWV"""
    # print(*trim(strings.split(), [int(x) for x in sp.split()], 5))
