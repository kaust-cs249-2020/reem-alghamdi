"""
@BY: Reem Alghamdi
@DATE: 25-09-2020
"""
from ch4.code.ch4_04 import cyclic_spectrum
from ch4.code.ch4_06 import mass, peptide_to_masses, expand, integer_mass_table_18
from ch4.code.ch4_13 import linear_score, trim


def score(peptide, spectrum):
    """
    given a peptide and a spectrum,
    return the count of the number of matches between cyclic spectrum of peptide and spectrum
    """
    s = spectrum.copy()
    count = 0
    for x in cyclic_spectrum(peptide):
        if x in s:
            count += 1
            s.remove(x)
    return count


def leaderboard_cyclopeptide_sequencing(spectrum, n, amino_list=None):
    """
    :param spectrum: spectrum (list of int)
    :return: highest score amino acids
    """
    leaderboard = [""]
    leader_peptide = ""
    parent_mass = max(spectrum)
    while len(leaderboard) > 0:
        leaderboard = expand(leaderboard, amino_list)
        for peptide in leaderboard[:]:
            mass_peptide = mass(peptide)
            if mass_peptide == parent_mass:
                if linear_score(peptide, spectrum) > linear_score(leader_peptide, spectrum):
                    leader_peptide = peptide
            elif mass_peptide > parent_mass:
                leaderboard.remove(peptide)
        leaderboard = trim(leaderboard, spectrum, n)
    return peptide_to_masses(leader_peptide)


def leaderboard_cyclopeptide_sequencing_list(spectrum, n, amino_list=None):
    """
    :param spectrum: spectrum (list of int)
    :return: list of amino acids with highest score
    """
    leaderboard = [""]
    leader_peptide = ""
    leader_peptides = []
    parent_mass = max(spectrum)
    while len(leaderboard) > 0:
        leaderboard = expand(leaderboard, amino_list)
        for peptide in leaderboard[:]:
            mass_peptide = mass(peptide)
            if mass_peptide == parent_mass:
                if linear_score(peptide, spectrum) > linear_score(leader_peptide, spectrum):
                    leader_peptide = peptide
                    leader_peptides = [{peptide: (peptide_to_masses(peptide), mass(peptide))}]
                elif linear_score(peptide, spectrum) == linear_score(leader_peptide, spectrum):
                    leader_peptides.append({peptide: (peptide_to_masses(peptide), mass(peptide))})
            elif mass_peptide > parent_mass:
                leaderboard.remove(peptide)
        leaderboard = trim(leaderboard, spectrum, n)
    return leader_peptides


if __name__ == "__main__":
    # print(score("NQEL", [int(x) for x in "0 99 113 114 128 227 257 299 355 356 370 371 484".split()]))
    # sp = "0 57 57 57 71 87 97 97 97 97 97 99 99 101 103 103 113 113 113 113 113 115 115 115 128 128 128 128 129 131 131 137 137 147 147 154 156 156 156 156 156 163 163 170 172 184 184 185 186 186 186 186 186 188 194 210 214 225 226 231 231 234 240 242 243 244 246 252 255 255 259 260 267 269 271 271 276 278 278 281 281 282 283 284 284 285 285 285 287 299 299 300 301 311 312 314 317 322 335 341 346 349 349 349 354 356 359 368 370 375 378 381 382 382 386 387 387 389 389 391 393 395 396 396 397 398 399 400 403 408 409 411 411 413 418 432 438 439 441 441 446 448 448 453 454 464 467 474 477 483 487 490 496 496 497 502 505 506 506 508 510 512 514 515 516 520 523 524 526 531 535 540 540 540 545 545 545 551 551 554 554 559 564 565 567 567 569 574 577 577 580 584 595 597 604 617 618 620 627 627 628 629 630 630 634 634 635 637 651 652 652 653 663 664 664 671 671 672 673 676 677 678 678 682 682 682 684 685 687 692 692 692 701 703 706 723 726 730 731 731 733 734 745 748 754 755 758 760 760 762 763 765 767 768 775 777 783 785 785 786 790 790 791 791 797 800 800 805 807 810 813 818 827 828 832 832 836 838 839 840 851 855 857 859 862 862 864 865 867 868 870 878 878 882 888 889 889 889 895 898 901 903 913 913 915 915 918 918 920 931 940 941 944 945 946 947 949 951 953 955 956 960 963 964 965 969 970 977 979 983 986 991 993 998 1002 1004 1012 1012 1015 1016 1017 1017 1018 1026 1026 1031 1033 1038 1041 1041 1041 1043 1046 1048 1052 1064 1067 1068 1069 1069 1073 1074 1074 1074 1075 1076 1077 1080 1082 1083 1109 1112 1112 1114 1116 1117 1117 1119 1126 1126 1129 1131 1135 1139 1140 1140 1141 1141 1144 1146 1149 1149 1154 1167 1171 1172 1173 1178 1179 1180 1186 1188 1189 1195 1196 1197 1199 1202 1203 1211 1211 1218 1223 1227 1227 1229 1229 1230 1232 1232 1236 1237 1238 1246 1249 1254 1254 1257 1259 1259 1264 1268 1278 1280 1281 1282 1296 1298 1299 1300 1300 1300 1302 1303 1304 1314 1316 1323 1326 1326 1329 1331 1335 1336 1340 1342 1342 1342 1351 1351 1352 1355 1357 1358 1358 1358 1361 1364 1374 1375 1382 1385 1386 1395 1395 1397 1397 1404 1413 1413 1415 1415 1415 1417 1420 1423 1427 1428 1428 1437 1438 1439 1441 1452 1454 1455 1463 1464 1466 1466 1467 1470 1471 1479 1482 1484 1485 1485 1485 1489 1489 1495 1496 1505 1508 1510 1514 1514 1516 1517 1517 1522 1528 1528 1530 1535 1538 1543 1554 1560 1560 1565 1566 1567 1567 1571 1573 1581 1581 1581 1582 1582 1583 1584 1586 1594 1595 1597 1598 1600 1613 1613 1614 1618 1623 1627 1627 1632 1636 1638 1641 1642 1645 1651 1652 1652 1653 1657 1663 1667 1668 1669 1670 1671 1675 1675 1680 1685 1686 1686 1691 1694 1694 1695 1697 1699 1709 1710 1710 1723 1739 1740 1744 1745 1747 1751 1751 1751 1753 1754 1755 1756 1760 1760 1764 1766 1767 1769 1769 1772 1774 1777 1780 1783 1783 1788 1796 1797 1798 1799 1804 1806 1808 1810 1814 1816 1823 1823 1831 1834 1838 1841 1853 1854 1858 1863 1866 1866 1867 1871 1871 1872 1873 1875 1877 1880 1880 1881 1882 1882 1882 1884 1888 1894 1896 1901 1903 1903 1909 1911 1911 1920 1929 1930 1937 1939 1941 1946 1951 1953 1955 1962 1963 1966 1968 1969 1972 1974 1978 1982 1982 1985 1986 1986 1987 1990 1991 1991 1993 1994 1994 1995 2008 2008 2009 2014 2020 2024 2027 2027 2029 2029 2040 2042 2044 2048 2050 2050 2056 2059 2061 2067 2067 2068 2068 2074 2075 2081 2086 2087 2091 2091 2097 2099 2099 2105 2105 2106 2109 2113 2118 2119 2123 2126 2132 2138 2140 2142 2143 2143 2147 2148 2148 2153 2158 2158 2158 2162 2164 2172 2177 2180 2181 2181 2182 2183 2188 2188 2193 2195 2196 2197 2198 2200 2202 2212 2215 2218 2228 2231 2237 2245 2245 2250 2252 2253 2253 2255 2259 2260 2263 2269 2271 2271 2273 2275 2275 2276 2279 2279 2285 2285 2290 2295 2295 2299 2299 2304 2305 2312 2315 2319 2320 2326 2328 2328 2328 2328 2340 2342 2344 2344 2344 2349 2356 2368 2368 2372 2372 2373 2373 2374 2375 2378 2378 2382 2383 2383 2384 2386 2387 2390 2394 2398 2398 2416 2417 2423 2425 2427 2429 2431 2432 2435 2435 2440 2443 2445 2449 2453 2455 2457 2459 2461 2462 2468 2469 2469 2470 2475 2480 2481 2487 2488 2495 2496 2499 2502 2505 2507 2514 2515 2522 2526 2526 2529 2530 2530 2531 2534 2537 2545 2550 2550 2553 2554 2554 2557 2558 2558 2559 2562 2563 2564 2564 2566 2572 2574 2582 2583 2584 2591 2593 2602 2606 2615 2617 2624 2625 2626 2634 2636 2642 2644 2644 2645 2646 2649 2650 2650 2651 2654 2654 2655 2658 2658 2663 2671 2674 2677 2678 2678 2679 2682 2682 2686 2693 2694 2701 2703 2706 2709 2712 2713 2720 2721 2727 2728 2733 2738 2739 2739 2740 2746 2747 2749 2751 2753 2755 2759 2763 2765 2768 2773 2773 2776 2777 2779 2781 2783 2785 2791 2792 2810 2810 2814 2818 2821 2822 2824 2825 2825 2826 2830 2830 2833 2834 2835 2835 2836 2836 2840 2840 2852 2859 2864 2864 2864 2866 2868 2880 2880 2880 2880 2882 2888 2889 2893 2896 2903 2904 2909 2909 2913 2913 2918 2923 2923 2929 2929 2932 2933 2933 2935 2937 2937 2939 2945 2948 2949 2953 2955 2955 2956 2958 2963 2963 2971 2977 2980 2990 2993 2996 3006 3008 3010 3011 3012 3013 3015 3020 3020 3025 3026 3027 3027 3028 3031 3036 3044 3046 3050 3050 3050 3055 3060 3060 3061 3065 3065 3066 3068 3070 3076 3082 3085 3089 3090 3095 3099 3102 3103 3103 3109 3109 3111 3117 3117 3121 3122 3127 3133 3134 3140 3140 3141 3141 3147 3149 3152 3158 3158 3160 3164 3166 3168 3179 3179 3181 3181 3184 3188 3194 3199 3200 3200 3213 3214 3214 3215 3217 3217 3218 3221 3222 3222 3223 3226 3226 3230 3234 3236 3239 3240 3242 3245 3246 3253 3255 3257 3262 3267 3269 3271 3278 3279 3288 3297 3297 3299 3305 3305 3307 3312 3314 3320 3324 3326 3326 3326 3327 3328 3328 3331 3333 3335 3336 3337 3337 3341 3342 3342 3345 3350 3354 3355 3367 3370 3374 3377 3385 3385 3392 3394 3398 3400 3402 3404 3409 3410 3411 3412 3420 3425 3425 3428 3431 3434 3436 3439 3439 3441 3442 3444 3448 3448 3452 3453 3454 3455 3457 3457 3457 3461 3463 3464 3468 3469 3485 3498 3498 3499 3509 3511 3513 3514 3514 3517 3522 3522 3523 3528 3533 3533 3537 3538 3539 3540 3541 3545 3551 3555 3556 3556 3557 3563 3566 3567 3570 3572 3576 3581 3581 3585 3590 3594 3595 3595 3608 3610 3611 3613 3614 3622 3624 3625 3626 3626 3627 3627 3627 3635 3637 3641 3641 3642 3643 3648 3648 3654 3665 3670 3673 3678 3680 3680 3686 3691 3691 3692 3694 3694 3698 3700 3703 3712 3713 3719 3719 3723 3723 3723 3724 3726 3729 3737 3738 3741 3742 3742 3744 3745 3753 3754 3756 3767 3769 3770 3771 3780 3780 3781 3785 3788 3791 3793 3793 3793 3795 3795 3804 3811 3811 3813 3813 3822 3823 3826 3833 3834 3844 3847 3850 3850 3850 3851 3853 3856 3857 3857 3866 3866 3866 3868 3872 3873 3877 3879 3882 3882 3885 3892 3894 3904 3905 3906 3908 3908 3908 3909 3910 3912 3926 3927 3928 3930 3940 3944 3949 3949 3951 3954 3954 3959 3962 3970 3971 3972 3976 3976 3978 3979 3979 3981 3981 3985 3990 3997 3997 4005 4006 4009 4011 4012 4013 4019 4020 4022 4028 4029 4030 4035 4036 4037 4041 4054 4059 4059 4062 4064 4067 4067 4068 4068 4069 4073 4077 4079 4082 4082 4089 4091 4091 4092 4094 4096 4096 4099 4125 4126 4128 4131 4132 4133 4134 4134 4134 4135 4139 4139 4140 4141 4144 4156 4160 4162 4165 4167 4167 4167 4170 4175 4177 4182 4182 4190 4191 4191 4192 4193 4196 4196 4204 4206 4210 4215 4217 4222 4225 4229 4231 4238 4239 4243 4244 4245 4248 4252 4253 4255 4257 4259 4261 4262 4263 4264 4267 4268 4277 4288 4290 4290 4293 4293 4295 4295 4305 4307 4310 4313 4319 4319 4319 4320 4326 4330 4330 4338 4340 4341 4343 4344 4346 4346 4349 4351 4353 4357 4368 4369 4370 4372 4376 4376 4380 4381 4390 4395 4398 4401 4403 4408 4408 4411 4417 4417 4418 4418 4422 4423 4423 4425 4431 4433 4440 4441 4443 4445 4446 4448 4448 4450 4453 4454 4460 4463 4474 4475 4477 4477 4478 4482 4485 4502 4505 4507 4516 4516 4516 4521 4523 4524 4526 4526 4526 4530 4530 4531 4532 4535 4536 4537 4537 4544 4544 4545 4555 4556 4556 4557 4571 4573 4574 4574 4578 4578 4579 4580 4581 4581 4588 4590 4591 4604 4611 4613 4624 4628 4631 4631 4634 4639 4641 4641 4643 4644 4649 4654 4654 4657 4657 4663 4663 4663 4668 4668 4668 4673 4677 4682 4684 4685 4688 4692 4693 4694 4696 4698 4700 4702 4702 4703 4706 4711 4712 4712 4718 4721 4725 4731 4734 4741 4744 4754 4755 4760 4760 4762 4767 4767 4769 4770 4776 4790 4795 4797 4797 4799 4800 4805 4808 4809 4810 4811 4812 4812 4813 4815 4817 4819 4819 4821 4821 4822 4826 4826 4827 4830 4833 4838 4840 4849 4852 4854 4859 4859 4859 4862 4867 4873 4886 4891 4894 4896 4897 4907 4908 4909 4909 4921 4923 4923 4923 4924 4924 4925 4926 4927 4927 4930 4930 4932 4937 4937 4939 4941 4948 4949 4953 4953 4956 4962 4964 4965 4966 4968 4974 4977 4977 4982 4983 4994 4998 5014 5020 5022 5022 5022 5022 5022 5023 5024 5024 5036 5038 5045 5045 5052 5052 5052 5052 5052 5054 5061 5061 5071 5071 5077 5077 5079 5080 5080 5080 5080 5093 5093 5093 5095 5095 5095 5095 5095 5105 5105 5107 5109 5109 5111 5111 5111 5111 5111 5121 5137 5151 5151 5151 5208"
    # print(score("KRCKYAIRKGDITADMSIEGVRVWYWKYPSPWIHMAPHDRDQC", [int(x) for x in sp.split()]))
    # sp = "0 71 113 129 147 200 218 260 313 331 347 389 460"
    # print(leaderboard_cyclopeptide_sequencing([int(x) for x in sp.split()], 10))
    # sp = "0 87 87 97 99 101 113 113 114 115 115 115 128 128 128 128 131 131 131 137 137 147 156 163 201 218 226 227 228 230 230 232 234 238 241 242 243 244 250 252 259 259 262 262 265 275 284 319 329 332 341 345 349 349 354 356 357 365 366 367 369 371 372 377 378 390 390 390 406 428 431 433 456 460 464 477 479 480 482 485 485 487 491 492 493 497 503 504 505 505 518 534 546 559 561 570 579 584 591 591 592 595 600 608 610 613 616 620 622 624 629 633 633 633 660 661 678 681 697 698 698 710 713 722 723 723 723 726 737 739 744 747 748 750 757 761 776 780 796 797 809 810 811 823 826 834 838 841 850 851 852 854 854 854 857 863 875 881 895 908 910 911 913 924 925 939 941 960 962 965 965 967 969 978 978 982 982 985 985 1000 1010 1010 1022 1023 1026 1038 1047 1052 1055 1066 1069 1079 1080 1082 1088 1093 1093 1097 1109 1113 1113 1115 1116 1125 1137 1138 1141 1151 1163 1175 1183 1183 1194 1195 1200 1201 1203 1208 1210 1216 1224 1228 1229 1230 1240 1244 1252 1253 1260 1262 1269 1282 1288 1311 1314 1314 1323 1331 1331 1331 1339 1341 1342 1345 1347 1355 1356 1357 1359 1367 1390 1391 1400 1401 1410 1411 1434 1442 1444 1445 1446 1454 1456 1459 1460 1462 1470 1470 1470 1478 1487 1487 1490 1504 1513 1519 1532 1539 1541 1548 1549 1557 1561 1571 1572 1573 1577 1585 1591 1593 1598 1600 1601 1606 1607 1618 1618 1626 1638 1650 1660 1663 1664 1676 1685 1686 1688 1688 1692 1704 1708 1708 1713 1719 1721 1722 1732 1735 1746 1749 1754 1763 1775 1778 1779 1791 1791 1801 1816 1816 1819 1819 1823 1823 1832 1834 1836 1836 1839 1841 1860 1862 1876 1877 1888 1890 1891 1893 1906 1920 1926 1938 1944 1947 1947 1947 1949 1950 1951 1960 1963 1967 1975 1978 1990 1991 1992 2004 2005 2021 2025 2040 2044 2051 2053 2054 2057 2062 2064 2075 2078 2078 2078 2079 2088 2091 2103 2103 2104 2120 2123 2140 2141 2168 2168 2168 2172 2177 2179 2181 2185 2188 2191 2193 2201 2206 2209 2210 2210 2217 2222 2231 2240 2242 2255 2267 2283 2296 2296 2297 2298 2304 2308 2309 2310 2314 2316 2316 2319 2321 2322 2324 2337 2341 2345 2368 2370 2373 2395 2411 2411 2411 2423 2424 2429 2430 2432 2434 2435 2436 2444 2445 2447 2452 2452 2456 2460 2469 2472 2482 2517 2526 2536 2539 2539 2542 2542 2549 2551 2557 2558 2559 2560 2563 2567 2569 2571 2571 2573 2574 2575 2583 2600 2638 2645 2654 2664 2664 2670 2670 2670 2673 2673 2673 2673 2686 2686 2686 2687 2688 2688 2700 2702 2704 2714 2714 2801"
    # print(leaderboard_cyclopeptide_sequencing([int(x) for x in sp.split()], 200))
    sp = "0 97 99 113 114 115 128 128 147 147 163 186 227 241 242 244 244 256 260 261 262 283 291 309 330 333 340 347 385 388 389 390 390 405 435 447 485 487 503 504 518 544 552 575 577 584 599 608 631 632 650 651 653 672 690 691 717 738 745 770 779 804 818 819 827 835 837 875 892 892 917 932 932 933 934 965 982 989 1039 1060 1062 1078 1080 1081 1095 1136 1159 1175 1175 1194 1194 1208 1209 1223 1322"
    print(leaderboard_cyclopeptide_sequencing_list([int(x) for x in sp.split()], 1000))
