"""
@BY: Reem Alghamdi
@DATE: 11-09-2020
"""
import operator

from ch2.code.ch2_05 import profile_most_probable_kmer


def profile_matrix_pseudocounts(motifs):
    """
    ["AAA",
    "GTC",
    "TAC"
    "CGG"]
    """
    """
    this function takes a matrix of t motifs of length k then returns the profile 4 (A, C, G, T) x k
    :param motifs: t x k motif matrix
    :return: profile: a 4 x k of dictionaries of nucleotides where the value of their count in each column count / t
    """
    profile = [[], [], [], []]
    for index in range(len(motifs[0])):

        col = [n[index] for n in motifs]
        frequent_n = {"A": 1, "C": 1, "G": 1, "T": 1}
        for nucleotide in col:
            frequent_n[nucleotide] += 1
        profile[0].append(frequent_n["A"] / (len(col) + 1))
        profile[1].append(frequent_n["C"] / (len(col) + 1))
        profile[2].append(frequent_n["G"] / (len(col) + 1))
        profile[3].append(frequent_n["T"] / (len(col) + 1))

    return profile


def score_pseudocounts(motifs):
    """
    this function takes a t motifs
    then returns the score
    :param matrix: t x k motif matrix
    :return: score: the sum of unpopular letters in all columns
    """
    score = 0
    for index in range(len(motifs[0])):
        col = [n[index] for n in motifs]
        frequent_n = {"A": 1, "C": 1, "G": 1, "T": 1}
        for nucleotide in col:
            frequent_n[nucleotide] += 1
        most_freq = max(frequent_n.items(), key=operator.itemgetter(1))[0]
        score = score + (len(col) + 1 - frequent_n[most_freq])
    return score


def greedy_motif_search_pseudocounts(dna, k, t):
    """
    :param dna: dna matrix of k motifs.
    :param k: kmer length
    :param t: length of dna
    :return: t x k string array of best motifs found in greedy search
    """
    best_motifs = [x[0:k] for x in dna]
    for index in range(len(dna[0]) - k + 1):
        kmer = dna[0][index:index+k]
        motifs = [kmer]
        for i in range(1, t):
            profile = profile_matrix_pseudocounts(motifs)
            motifs.append(profile_most_probable_kmer(dna[i], k, profile))
        if score_pseudocounts(motifs) < score_pseudocounts(best_motifs):
            best_motifs = motifs
    return best_motifs


if __name__ == '__main__':
    print(*greedy_motif_search_pseudocounts(["GGCGTTCAGGCA",
                              "AAGAATCAGTCA",
                              "CAAGGAGTTCGC",
                              "CACGTCAATCAC",
                              "CAATAATATTCG"], 3, 5))
    print(*greedy_motif_search_pseudocounts(['TTCGCCTTCGGCGAGCGCGGCCGAAAAAAAATGTGTGTCGGCCGTTTTTGGCCCCTCTGTCCATTGTGTAGGCTTAGACGTGCTTTTTACCCAACTTTTATTCATACTTACATTCGGCCCGGTATGCGTTATCGTGACCGCATCCGGGCGTCGTGT', 'CTGTGAGGTCGTATAGAAGTTGTACATTGGATGCTCTTGCTCATGTACGGAGCCGGATTATCCATTCGGCTCAAAAAAAGGCGCGACACGCTCTTGGCAACGCACATAGGATGATTATGTGTCACGCTCTAAACAGCGAAACATTGTCACTTGATG', 'CATCACAGGCTCCGGTATCCTTAGGCCTTATCTCTAGGTCTCCGCTCCTTCAGTACGCAAGTTGTTCGAGCACCCAGCTAGCCGCAATGGACGCCAGGGGTCGAGCGTTGCACTCGACCCACGACCGTCCAGATCCCTGCAAGCCTTGAATGCTCG', 'CGTGACTCACCTTCGAGCAACCCCGGGCGGATAAATACACCATGCTTGCCTCACTGGGGGCCCACAATAGGTAATATCTCTAGCGAGACCCTTCGAGTCAAGCAATCCGGTTCGCCTCCCTACAATCGACCCAAACAGTCGCGCGCGAGCTATTCC', 'AATGCGTCCCGCCCGGCTGCCCGCTATCCCCGATCTGTAAGATTTCTGGGACCTGTGGACGACGGACTACAAGTGCCACGACCCCATTCTACTCGTCCTGCGTGTGGTCTTCAGAGATAGTTCAGTCGACACAAAAGGCTACATAAGCATTAAATC', 'ACCTATCACCGGCGCTGACCGTTGGCTATCAGCTGCTTAAGTAAACTTACCATTAATCTACGCTATCTTCTGTAGGACTCCCGGCGCGGCCCTGGATCCAGTCGTCACTACTGCTTTGATCGGATCTTGCAGTGTGTCTCCAACTGATTCGTACAT', 'TAGATAACCCAAATAGGCGGTCAGACGAGAGAAACGACCTTGCACACCGTCCTGGATGGCTTACTTCTTGAGTCCTTCACTGCCGACTCCATCCGCTCCACTCGACACCACGCCGAAATCTCTGAGATATAAAGTCGGCATGTATGGGCTGCCAGC', 'CGCACGGTCACTTGAAGATGTATCAAGAACACTTGCCAAAGCACCGCTCTAGTTCTGACGAAACATACGAGTCGTGGAACTGTAGTCAGCTACTGTGTGCGTCAATTCCCGCACACACTTCTCAATCTCGCCTGCACTCGACTCAGCGAGCGCTAA', 'CTCCATCCATGGGCCTTTGACTCTGGCTCGCGTAACGGGCAAGCTCGACAGAGGACTTCATGCACTCGCCTCAGGTTTCAGTCCTTCTCATTGCAATTCGGGACCACACCATTAGGCGTGACAGATGCCGGGAATTGAAACTCGAGCTAGTAAATA', 'TATGTGACGCGCGACCCGCAATTTTGCTTGGTAGTACGATTGATAGTAACAGCCGTCGAGGAACCACTAACCCTGTAGAAGCTTTCCACTCGGCACGGTGCTGTGGTAAAAGTGAACCAATTGTACAGAGCCGCACAGTGGACATAGGCTCTCCTC', 'ACAGTTTCCCTCGGACAAGGTTCAAGGTTCGTTTGCTGTACTGTATTGCGGAGTGGGCGAATGATAGGAGAGCCCGAATGAAGATCCGCTATCCCATGATACCCGGACTGTAGGTGGTAGCCCCGGATAACATACAGTCGGCGCGGTTGAACATTC', 'TCCCAGCGGAGCTACGAACTAAATCCTGGCCCTATACTGATCTCCGCCGCAGCGCAGTTTACATCCGTTTGATGGCCATAGTGGAAAAGCAGACCATACAGTCGCCGCATGCAACAGTAGTTCAATAAACACCGCCTATAAGCCTGGGCAGCATGT', 'CTTCGACCACAAGACTGCGGAAGATGCATTCGACGCAGGCACGAGTCTTCATATCATAGGCTATATGGGGCACACACGTCAAACGCTGGGTACCCATTGTCAGCGATCTTGTCTCCAAGCGTTGTAACGTGATCCCTGCCCATGTGCAACCTCCGG', 'GTAATGTACCAAGAAAATTTTGTTCCTCTGATTTAAAACGACGTTAATCTGGGGGTTGTAGCCATTGCGCCCTTCATTCGCCCCAGAAGCAAGGTAGCCGTGCTTCGGACGCCTACTACATGTGGCGCATATGCGTTGGGTTCGTTTCATTCGGTA', 'AACAGGGCATCCCATCCAGGAAACACCTCGTCCTGGCAACGGTTTACGTAATTTATCGAATACAATCGGCCCACCCTGCGCTTCGAATAAGTTACGCCCCATATCCGGGGACGATGAACTGGGATATAGATGCTATAGCATCCCTCGGACTGCGAA', 'GGTACTCCCTCTTTCAATCGACTCATAGGAGCCACCTGAGGGCACAAGAGACCCAGAGTACGAGAGACCCGGTCGAAACATCCTTAAATTACTTGGCTTTTGAATTAGCACTCAGGAGTTCATGCACTCCGGAATTCGGCCGCGTATTTCGGACGA', 'TTCAATCGTCCCTTTCCAGCTCGTGCCGGGTTGGTCCACGGTCGCTTATCTTCAAGCATTCTAATGACGGGTATCTTGGTTAAGCGAAGCTTGCAGTTTGGAGTGCAAGGGGCCCCCCGAAAAGGCCATACTTGAACGCTAACGGCGGGGCAGCAG', 'CCAATCAAACCGAGGAGGGTAGCCTCACACAACTTCGTCATCCGGTACAAGCCGTCTTGGAGGTTTTAATTAATTAACGGCTGCTCAGTGATGTGTGAGGGCGGCTTAGAAAACAGGATGATAGATTGCGCATTCACTCGACGCATGGCAATTTGG', 'GGGCAAAAACACTCGTACGTGATCTTAGATCACTCGCAGATATAAACTGGCGCACCTAGGCGGGTAACCACGCGTTGTACTTGTTTCATTCGCCACGAAATCTGCAACTTACATCACGGATCCTCGGGCTAGCCGCAAAATGCGAGGAGCATAAAG', 'TCAATGCAGTGAAAATACGCGTTAGCCCTCCAGACCACTGGAATGCGATTCAATCGTCCCGAGAACATGTCCATTTCCGTGATCCCGGATTCCCCAAGACTTACCAAGTCCTCAATATAAAACGCTCCAGGCTCTCCAAGGGTCTCTGTCCGGGTT', 'CGTCTCCTGCATTCCAGTCGACACTTTTTTTCAAGAGTCTGTTCAGTACCAAGCAGCAAGTGAAAGTTTTAGGATCAGTATGAATGTACAACTAGGCTAAATACACGTCTTTTGGCTGGAATAACGTTTAAACTACCAAATTCAATACCAACCACC', 'GGGAAACATCAATGCATTCGACGCAAATGCGTTAGCTGTCTTGGGGATCTGATGTGCGCCGATTGATATTGGTATGACGCTACCTTATAACACGGCCTAAAACATGGGACAGTGTCTAATCAACTTGTCCAGTCTGGTGCCTCTGGCACACTATGT', 'CCCCACCCCCGCAAGCGTAGACTTCTTCTGAAATAAAGGAAGTAGCTCAGTGGATGTGCAGAGAATATCACGGGACTTAGATCAAGCCGTATCAGCGTGCTAGACTCGGGGGCCGTGATTTACAATCGGCGCCTCCACTATCCGCTGTGTTGGCTC', 'GGGATTGCAGTTAACAACGTTTGACGGTCGTGAAAAAGACAGGACACCGACCGCAATGGGTAACCTGAACCGATCTCATCGGTCATCGTCGCAAATAAGAATCCATTCTTGTGGCGTTATGTGCACAGATCACTAGGCTGATATTGCAGTCGTCTC', 'TTCAGTCGTCCCGGGCTACATGCGCCAAAGATTGATTTGGAGACTAGTACCTGACATAACTAAACCTAATGGCGCAGGTAGAGACGTTTTCGTCGGGTTGGGACCGGTGCGTCAGTAGGAAGGTGGCCTTTCCGTGCCGAAGTTGCCGCGGGCTGA'], 12, 25))
